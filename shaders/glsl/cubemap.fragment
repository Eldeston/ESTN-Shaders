// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"
#include "uniformShaderConstants.h"
#include "util.h"
#include "uniformPerFrameConstants.h"

// Including files....
#include "gl_assets/functionLib.glsl"
#include "gl_assets/globalPrecision.glsl"

#if __VERSION__ >= 300

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2 uv;
#else
_centroid in vec2 uv;
#endif

#else

varying vec2 uv;

#endif

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

varying POS3P position;

void main()
{
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, uv );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv );
#endif

#ifdef ALPHA_TEST
	if(diffuse.a < 0.5)
		discard;
#endif

Value = maxC(CURRENT_COLOR);
Value = sqrt(clamp2((Value - .2) / (1. - .2)));

dayA = pow(clamp2(1. - FOG_COLOR.b * 1.2), .5);
nightA = pow(clamp2(1. - FOG_COLOR.r * 1.5),1.2);
rainA = clamp2(pow((.7 - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 3.));

#ifdef CCUBEMAP_SHADER 
	#ifndef UNDERWATER
		#if defined CCLOUDS && defined DCLOUDS
			int stepCount = 4;
			vec2 texPos = fract(position.xz * .12 - mod(TOTAL_REAL_WORLD_TIME * .00025,  1.));
			vec4 cloudTex = texture2D(TEXTURE_0, texPos);
			for(int n = 0; n <= stepCount; n++){
				vec2 uvOffset = maxC(cloudTex) * normalize(position).xz * .0005 * float(n);
				vec4 texCloud3D = texture2D(TEXTURE_0, texPos + uvOffset);
				
				if(texCloud3D.r > cloudTex.r && texCloud3D.a > 0.){
					cloudTex = vec4(texCloud3D.rgb * mix(gradientB1, gradientB2, float(n) / float(stepCount)), texCloud3D.a);
					break; //if brighter, dont need to go deeper
					}
				}
			vec4 cloudCol = mix(MIX2(cn_color, cs_color, cd_color, Value), FOG_COLOR + vec4(vec3(.12), 0), rainA);
		#else
			vec4 cloudCol = vec4(0);
			vec4 cloudTex = vec4(0);
		#endif
		float gradient0 = smoothstep(.52, .13, length(position.xz));
		float gradient1 = smoothstep(.52, .39, length(position.xz));
	    final = mix(mix(mix(fd_color, fs_color, dayA), fn_color, nightA), FOG_COLOR, rainA);
		final.a = position.y > 0. ? gradient0 : gradient1 * cloudTex.a;
		final.rgb = position.y > 0. ? final.rgb : cloudCol.rgb * cloudTex.rgb;
	#else
    	final = FOG_COLOR;
	#endif
#else
	final = CURRENT_COLOR * diffuse;
#endif
	gl_FragColor = final;
}
