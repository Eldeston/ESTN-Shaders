// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"
#include "uniformShaderConstants.h"
#include "uniformPerFrameConstants.h"
#include "util.h"

// Including files that contains the calculations.....
#include "gl_assets/functionLib.glsl"
#include "gl_assets/globalPrecision.glsl"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying hvec4 color;
varying hfloat originAlpha;

// Other varying variables...
varying hvec3 world_pos, position;
varying hvec2 screenPos;
// All fog variables
varying float shdFog, beamFog, atmoFog;

#ifdef FOG
varying vec4 fogColor;
#endif

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

#define tTime sin(TOTAL_REAL_WORLD_TIME * .5)

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else

#if USE_TEXEL_AA
	// Get main texture
	vec4 albedo = texture2D_AA(TEXTURE_0, uv0);
#else
	// Get main texture
	vec4 albedo = texture2D(TEXTURE_0, uv0);
#endif

// Get world surface normal
hvec3 T = normalize(dFdx(position));
hvec3 B = normalize(dFdy(position));
hvec3 N = normalize(cross(T, B));
highp mat3 TBN = transpose(mat3(T, B, N));

float d0 = maxC(A_Contrast(albedo.rgb, normDetail));
float d1 = maxC(A_Contrast(texture2D(TEXTURE_0, uv0 + vec2(delta, 0)).rgb, normDetail));
float d2 = maxC(A_Contrast(texture2D(TEXTURE_0, uv0 + vec2(0, delta)).rgb, normDetail));

float dx = (d0 - d1) / delta;
float dy = (d0 - d2) / delta;
vec3 normalMap = normalize(vec3(dx, dy, 5. * normDetail));

#ifdef NORMAL_MAPS
	float detailFar = min(length(world_pos) / 16., 1.);
	N = (normalMap * TBN) * (1. - detailFar) + N * detailFar;
#endif

// Main variables...
dayA = pow(clamp2(1. - FOG_COLOR.b * 1.2), .5);
nightA = pow(clamp2(1. - FOG_COLOR.r * 1.5),1.2);
rainA = clamp2(pow((.7 - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 3.));
float terrainTime = pow(maxC(texture2D(TEXTURE_1, vec2(0, 1))), 5.);
hfloat terraDim0 = maxC(texture2D(TEXTURE_1, vec2(0, 1)));
hfloat terraDim1 = maxC(texture2D(TEXTURE_1, vec2(0)));
float lightMap = maxC(texture2D(TEXTURE_1, vec2(uv1.x, 0)));
float shdMap = maxC(texture2D(TEXTURE_1, vec2(0, uv1.y)));
vec2 uv2 = clamp2(pow(uv1, vec2(lightShrp, 1)) * vec2(lightSize, 1));

// Beam rendering goes here
float beamFar = clamp2(abs(-world_pos.x) / (RENDER_DISTANCE / 1.6));
float sunBeam = pow(vnoise(atan(world_pos.y, world_pos.z) / (pi * 2.) * 75.1), 1.75) * 1.75;
sunBeam = smoothstep(1., .2, length(screenPos * screenPos * screenPos)) * mix(clamp2(sunBeam) * smoothstep(.2, 1., length(world_pos.yz) / 16.), 1., beamFar * beamFar * beamFar);

#ifdef SEASONS_FAR
	albedo.a = 1.;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD .05
	#else
	#define ALPHA_THRESHOLD .5
	#endif
	if(albedo.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	albedo.a *= inColor.a;
#endif

#if !defined(ALWAYS_LIT)
	float emissive = smoothstep(.864, 1., clamp2(mix(.45, maxC(albedo), 2.5))) * maxC(albedo);
	albedo *= texture2D(TEXTURE_1, uv2);
	#ifdef EMISSIVE_MAPS
		albedo.rgb *= isBlock(color) ? mix(1., emissValue * mix(.4, 1., emissive), smoothstep(.8564, .8745, uv1.x) * mix(1. - shdMap * shdMap * shdMap * shdMap * shdMap, mix(1., .4, uv1.y), rainA)) : 1.;
	#endif
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		albedo.a = inColor.a;
	#endif
	
	vec4 hsvCol = rgb2hsv(inColor);
	float colAmb = normalize(vec2(hsvCol.z, .56)).x;
	inColor.rgb = isBlock(color) ? sqrt(color.rgb) : hsv2rgb(vec4(hsvCol.xy, colAmb, 1.)).rgb;
	albedo.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	albedo.rgb *= mix(vec3(1.), texture2D(TEXTURE_2, uv).rgb * 2., inColor.b);
	albedo.rgb *= inColor.aaa;
	albedo.a = 1.;
#endif

vec3 shadowAmbient = shadowCol * shadow_B * mix(albedo.rgb, vec3(1), shdFog);

// Calculate the shadows
float shdX, shdY = 0.;
#ifdef NORM_SHADOWS
	shdX = max(N.y, N.z) < .5 && !(clamp2(abs(N.z)) > .75) ? 1. : 0.;
#endif
#ifdef EXTRA_SHADOWS
	shdX = isBlock(color) ? 1. - (maxC(color) - .64) * 31. : shdX;
#endif
#ifdef BASIC_SHADOWS
	shdY = 1. - (uv1.y - .867) * 124.;
#endif
float shadow_v = clamp2(max(shdX, shdY)) * shdAlpha;

#ifdef SHADOW_FOG
	shadow_v = clamp2(mix(shadow_v, shadow_v * 1.4, shdFog));
#endif

albedo.rgb = mix(albedo.rgb, shadowAmbient, shadow_v * (1. - uv2.x) * pow(mix(1., shdAlpha, max(dayA, rainA)), 1.4));

#if (!defined ALPHA_TEST && defined WATER_NOISE) || (defined UNDERWATER && defined UNDERWATER_CAUSTIC)
	#if NOISE_T
		float waterNoi = voronoi2D(fract(position.xz / 16.), TOTAL_REAL_WORLD_TIME * .27, 3.);
	#else
		float waterNoi = vnoise(fract(position.xz / 16.), TOTAL_REAL_WORLD_TIME * .08, 6.) * .9;
	#endif
	#ifdef LAYERED_NOISE
		waterNoi += vnoise(fract(position.xz / 16.), TOTAL_REAL_WORLD_TIME * .2, 45.) * .15;
	#endif
#endif

#if !defined ALPHA_TEST && defined WATER_NOISE // Water noise applied
	albedo.rgb *= originAlpha < .95 && originAlpha != 0. && !(isBlock(color)) ? clamp2(((waterNoi * waterNoi * waterNoi * waterNoi * 1.2) + .36) * (1. - atmoFog) + atmoFog) : 1.;
#endif

#if defined UNDERWATER && defined UNDERWATER_CAUSTIC // Water caustics applied
	float causticNoi = clamp2((waterNoi * waterNoi * waterNoi * waterNoi * 1.8) + .32);
	albedo.rgb *= mix(mix(causticNoi, 1., uv1.y * 1.24), mix(mix(causticNoi, 1., .75), 1., uv1.y * 1.24), uv1.x);
	albedo.rgb *= mix(max(FOG_COLOR.rgb, hsv2rgb(vec4(rgb2hsv(FOG_COLOR).x, .75, 1, 1)).rgb), vec3(1), max(uv1.x, uv1.y));
#endif

#ifndef UNDERWATER // Light applied before tonemap, only if it's not underwater
	albedo.rgb = mix(albedo.rgb + (lightCol * uv2.x), albedo.rgb, mix(shdMap, .5, rainA));
#endif

albedo.rgb = toneA(albedo.rgb);

// Mono buffer applied after tonemap
vec3 grey_s = A_Saturation(albedo.rgb, mix(monoSat, 1., uv2.x));

#ifndef UNDERWATER // The monochromatic effect will render differently for terrain, if the player is not underwater
	float rainExp = rainA * uv2.y;
	albedo.rgb = FOG_CONTROL.x < 1. && FOG_CONTROL.x > 0. ? mix(albedo.rgb, grey_s * mix(mono_B, 1., uv2.x), rainExp) : albedo.rgb;
#endif

#ifdef CUSTOM_ANGLE
	#define ANGLE (customAngle / 360.) * pi
#else
	#define ANGLE (terrainTime - .5) * pi
#endif

hvec3 lPos = normalize(vec3(vec2(100, 0) * ROT2D(ANGLE), 0) + world_pos);
hvec3 rPos = reflect(-lPos, N);
float spec = max(dot(rPos, normalize(-world_pos)), 0.);

vec3 baseSpec = isBlock(color) ? A_Saturation(texture2D(TEXTURE_0, uv0).rgb, .6) : texture2D(TEXTURE_0, uv0).rgb * A_Saturation(inColor.rgb, .5);

#if !defined ALPHA_TEST && defined SPECULAR
	albedo += pow(spec, 16.) * sqrt(rgb2hsv(vec4(baseSpec, 1)).y * 1.3) * mix(mix(mix(sld_color, sls_color, dayA), sln_color, nightA), vec4(0), rainA) * (1. - clamp2(max(shdX, shdY)));
#endif

#ifdef HDR // HDR applied
	albedo = rgb2hdr(albedo);
#endif

#ifdef ATMO // Atmospheric fog takes place here
	vec3 atmoCol = isDimen(terraDim0, terraDim1) ? FOG_COLOR.rgb * 2. : mix(mix(mix(ad_color, as_color, dayA), an_color, nightA), mix(vec4(.24), FOG_COLOR, maxC(FOG_COLOR)), rainA).rgb;
	albedo.rgb = mix(albedo.rgb, atmoCol, atmoFog);
#endif

#ifdef BEAMS // Sunbeams are applied after atmospheric fog
	albedo.rgb = isDimen(terraDim0, terraDim1) ? albedo.rgb : mix(albedo.rgb, A_Saturation(FOG_COLOR.rgb * 1.6, 1.2) * sunBeam, beamFog * uv1.y);
#endif

#ifdef DEBUG
	albedo = vec4(floor(position) / 16., 1);
	albedo.rgb = mix(mix(albedo.rgb, vec3(0, 0, 1), atmoFog * 1.16), vec3(1, 1, 0), beamFog * 1.44);
#endif

#ifdef FOG // Default fog applied after all the applied effects
	albedo.rgb = mix(albedo.rgb, isDimen(terraDim0, terraDim1) ? FOG_COLOR.rgb : fogColor.rgb, fogColor.a);
#endif

	gl_FragColor = albedo;

#endif // BYPASS_PIXEL_SHADER
}
