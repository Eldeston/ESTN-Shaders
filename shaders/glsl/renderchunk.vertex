// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "vertexVersionCentroid.h"
#include "uniformWorldConstants.h"
#include "uniformPerFrameConstants.h"
#include "uniformShaderConstants.h"
#include "uniformRenderChunkConstants.h"

// Including files that contains the calculations.....
#include "gl_assets/functionLib.glsl"
#include "gl_assets/globalPrecision.glsl"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		_centroid out vec2 uv0;
		_centroid out vec2 uv1;
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

#ifndef BYPASS_PIXEL_SHADER
	varying vec4 color;
	varying float originAlpha;
#endif

#ifdef FOG
	varying vec4 fogColor;
#endif

// Other varying variables...
// Minecraft has this inbuilt macro
varying vec3 world_pos, position;
// POS2P is the precision of a vec2
varying vec2 screenPos;
// All fog variables
varying float shdFog, beamFog, atmoFog;

attribute POS4 POSITION;
attribute vec4 COLOR;
attribute vec2 TEXCOORD_0;
attribute vec2 TEXCOORD_1;

const float rA = 1.0;
const float rB = 1.0;
const vec3 UNIT_Y = vec3(0,1,0);
const float DIST_DESATURATION = 56.0 / 255.0; //WARNING this value is also hardcoded in the water color, don'tchange

void main()
{
    POS4 worldPos;
#ifdef AS_ENTITY_RENDERER
		POS4 pos = WORLDVIEWPROJ * POSITION;
		worldPos = pos;
#else
    worldPos.xyz = (POSITION.xyz * CHUNK_ORIGIN_AND_SCALE.w) + CHUNK_ORIGIN_AND_SCALE.xyz;
    worldPos.w = 1.;

    // Transform to view space before projection instead of all at once to avoid floating point errors
    // Not required for entities because they are already offset by camera translation before rendering
    // World position here is calculated above and can get huge
    POS4 pos = WORLDVIEW * worldPos;
    pos = PROJ * pos;
#endif
    gl_Position = pos;

#ifndef BYPASS_PIXEL_SHADER
    uv0 = TEXCOORD_0;
    uv1 = TEXCOORD_1;
	color = COLOR;
	originAlpha = COLOR.a;
#endif

///// find distance from the camera

#ifdef FANCY
	float cameraDepth = length(-worldPos.xyz);
#else
	float cameraDepth = pos.z * .96;
#endif

///// Main variables...
dayA = pow(clamp2(1. - FOG_COLOR.b * 1.2), .5);
nightA = pow(clamp2(1. - FOG_COLOR.r * 1.5),1.2);
rainA = clamp2(pow((.7 - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), 3.));
screenPos = pos.st / (pos.p + 1.);
world_pos = worldPos.stp;
position = POSITION.xyz;
///// Method recreated, and no longer uses Genghar's way of calculating the pos
vec3 tiledPos = mod(fract(POSITION.xyz / 16.) * pi, pi);

///// Atmospheric fog calculation /////
float heightFog = mix(maxHeight, minHeight, rainA);
float nightFog = mix(densityMax, densityMin, nightA) * ((1. - rainA) + rainA * densityRain);
float height1 = worldPos.y < .0 ? -(worldPos.y / heightFog) * abs(worldPos.y / heightFog) : .0;
float height2 = worldPos.y < .0 ? -(worldPos.y / 45.) * abs(worldPos.y / 45.) : .0;
float fog1 = cameraDepth / (RENDER_DISTANCE / nightFog);
float fog2 = cameraDepth / heightFog; float fog3 = cameraDepth / 24.;
atmoFog = clamp(mix(fog1 * fog1, sqrt(fog2), height1), .0, .7);
beamFog = clamp(mix(fog3, sqrt(fog2), height2), .0, .64) * dayA * pow(1. - nightA, 4.);
#ifdef SHADOW_FOG
	shdFog = clamp2(mix(fog1 * fog1, sqrt(fog2), height1)) * mix(1., .64, nightA);
#else
	shdFog = 0.;
#endif

///// Animated foilage, water and underwater distortion
///// Now detects if it's a foilage or water block with 90% accuracy
// First indicate the areas where it should render waves or not
float waveFar = smoothstep(36., 24., cameraDepth);
#if defined ALPHA_TEST && defined PLANT_WAVES
	float wind = GENWAVEC(vec3(tiledPos.xz, TOTAL_REAL_WORLD_TIME), vec3(vec2(1), 1.6), .75 * TEXCOORD_1.y);
	gl_Position.s += isPlant(COLOR) && !(isBlock(COLOR)) ? GENWAVES(vec4(tiledPos, TOTAL_REAL_WORLD_TIME), vec4(6, -6, 6, 3), .025) + mix(.014, -.028, wind) : .0;
	// color += wind; // Visualize wind
#endif

#if defined WATER_WAVES && defined BLEND
	gl_Position.t += COLOR.a < .95 && !(isBlock(COLOR)) ? GENWAVEC(vec4(tiledPos, TOTAL_REAL_WORLD_TIME), vec4(vec3(4), 3), .064 * waveFar) : .0;
#endif

#if defined UNDERWATER_WAVES && defined UNDERWATER
	gl_Position.s += GENWAVEC(vec3(screenPos, TOTAL_REAL_WORLD_TIME), vec3(12, 6, 1), .016 * (pos.z + 1.));
#endif

///// apply fog

#ifdef FOG
	float len = cameraDepth / RENDER_DISTANCE;
	#ifdef ALLOW_FADE
		len += RENDER_CHUNK_FOG_ALPHA;
	#endif

    fogColor.rgb = mix(mix(mix(fd_color, fs_color, dayA), fn_color, nightA), FOG_COLOR, rainA).rgb;
	fogColor.a = clamp((len - FOG_CONTROL.x) / (FOG_CONTROL.y - FOG_CONTROL.x), .0, 1.);

	// Water fog
    #ifdef UNDERWATER
       fogColor.rgb = FOG_COLOR.rgb;
    #endif
#endif

///// blended layer (mostly water) magic
#ifdef BLEND
	//Mega hack: only things that become opaque are allowed to have vertex-driven transparency in the Blended layer...
	//to fix this we'd need to find more space for a flag in the vertex format. color.a is the only unused part
	bool shouldBecomeOpaqueInTheDistance = color.a < .95;
	if(shouldBecomeOpaqueInTheDistance) {
		#ifdef FANCY  /////enhance water
			float cameraDist = cameraDepth / FAR_CHUNKS_DISTANCE;
			color = COLOR;
		#else
			// Completely insane, but if I don't have these two lines in here, the water doesn't render on a Nexus 6
			vec4 surfColor = vec4(color.rgb, 1.);
			color = surfColor;
			
			float camDist = length(-worldPos.xyz);
			float cameraDist = camDist / FAR_CHUNKS_DISTANCE;
		#endif //FANCY
		
		float alphaFadeOut = clamp(cameraDist, .0, 1.);
		color.a = mix(color.a, 1., alphaFadeOut);
	}
#endif

#ifndef BYPASS_PIXEL_SHADER
	#ifndef FOG
		// If the FOG_COLOR isn't used, the reflection on NVN fails to compute the correct size of the constant buffer as the uniform will also be gone from the reflection data
		color.rgb += FOG_COLOR.rgb * .000001;
	#endif
#endif
}
